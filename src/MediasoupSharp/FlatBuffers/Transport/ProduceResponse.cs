// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System.Text.Json.Serialization;
using FlatBuffers.RtpParameters;
using Google.FlatBuffers;
using Type = FlatBuffers.RtpParameters.Type;

namespace FlatBuffers.Transport
{
    public struct ProduceResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static ProduceResponse GetRootAsProduceResponse(ByteBuffer _bb) { return GetRootAsProduceResponse(_bb, new ProduceResponse()); }
        public static ProduceResponse GetRootAsProduceResponse(ByteBuffer _bb, ProduceResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public ProduceResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Type Type { get { int o = __p.__offset(4); return o != 0 ? (Type)__p.bb.Get(o + __p.bb_pos) : Type.SIMPLE; } }

        public static Offset<ProduceResponse> CreateProduceResponse(FlatBufferBuilder builder,
                                                                    Type type = Type.SIMPLE)
        {
            builder.StartTable(1);
            ProduceResponse.AddType(builder, type);
            return ProduceResponse.EndProduceResponse(builder);
        }

        public static void StartProduceResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddType(FlatBufferBuilder builder, Type type) { builder.AddByte(0, (byte)type, 0); }
        public static Offset<ProduceResponse> EndProduceResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<ProduceResponse>(o);
        }
        public ProduceResponseT UnPack()
        {
            var _o = new ProduceResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(ProduceResponseT _o)
        {
            _o.Type = this.Type;
        }
        public static Offset<ProduceResponse> Pack(FlatBufferBuilder builder, ProduceResponseT _o)
        {
            if(_o == null)
                return default(Offset<ProduceResponse>);
            return CreateProduceResponse(
              builder,
              _o.Type);
        }
    }

    public class ProduceResponseT
    {
        [JsonPropertyName("type")]
        public Type Type { get; set; }

        public ProduceResponseT()
        {
            this.Type = Type.SIMPLE;
        }
    }
}
