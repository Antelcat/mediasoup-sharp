// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using Google.FlatBuffers;
using System.Text.Json.Serialization;
using FlatBuffers.ActiveSpeakerObserver;
using FlatBuffers.AudioLevelObserver;
using FlatBuffers.Consumer;
using FlatBuffers.DataConsumer;
using FlatBuffers.DirectTransport;
using FlatBuffers.PlainTransport;
using FlatBuffers.Producer;
using FlatBuffers.Transport;
using FlatBuffers.WebRtcTransport;
using ScoreNotification = FlatBuffers.Producer.ScoreNotification;
using TraceNotification = FlatBuffers.Transport.TraceNotification;

namespace FlatBuffers.Notification
{
    public struct Notification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Notification GetRootAsNotification(ByteBuffer _bb) { return GetRootAsNotification(_bb, new Notification()); }
        public static Notification GetRootAsNotification(ByteBuffer _bb, Notification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Notification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string HandlerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHandlerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetHandlerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetHandlerIdArray() { return __p.__vector_as_array<byte>(4); }
        public Event Event { get { int o = __p.__offset(6); return o != 0 ? (Event)__p.bb.Get(o + __p.bb_pos) : Event.TRANSPORT_SEND_RTCP; } }
        public Body BodyType { get { int o = __p.__offset(8); return o != 0 ? (Body)__p.bb.Get(o + __p.bb_pos) : FlatBuffers.Notification.Body.NONE; } }
        public TTable? Body<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(10); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
        public SendRtcpNotification BodyAsTransport_SendRtcpNotification() { return Body<SendRtcpNotification>().Value; }
        public SctpStateChangeNotification BodyAsTransport_SctpStateChangeNotification() { return Body<SctpStateChangeNotification>().Value; }
        public SendNotification BodyAsProducer_SendNotification() { return Body<SendNotification>().Value; }
        public DataProducer.SendNotification BodyAsDataProducer_SendNotification() { return Body<DataProducer.SendNotification>().Value; }
        public TraceNotification BodyAsTransport_TraceNotification() { return Body<TraceNotification>().Value; }
        public IceSelectedTupleChangeNotification BodyAsWebRtcTransport_IceSelectedTupleChangeNotification() { return Body<IceSelectedTupleChangeNotification>().Value; }
        public IceStateChangeNotification BodyAsWebRtcTransport_IceStateChangeNotification() { return Body<IceStateChangeNotification>().Value; }
        public DtlsStateChangeNotification BodyAsWebRtcTransport_DtlsStateChangeNotification() { return Body<DtlsStateChangeNotification>().Value; }
        public TupleNotification BodyAsPlainTransport_TupleNotification() { return Body<TupleNotification>().Value; }
        public RtcpTupleNotification BodyAsPlainTransport_RtcpTupleNotification() { return Body<RtcpTupleNotification>().Value; }
        public RtcpNotification BodyAsDirectTransport_RtcpNotification() { return Body<RtcpNotification>().Value; }
        public ScoreNotification BodyAsProducer_ScoreNotification() { return Body<ScoreNotification>().Value; }
        public Producer.TraceNotification BodyAsProducer_TraceNotification() { return Body<Producer.TraceNotification>().Value; }
        public VideoOrientationChangeNotification BodyAsProducer_VideoOrientationChangeNotification() { return Body<VideoOrientationChangeNotification>().Value; }
        public LayersChangeNotification BodyAsConsumer_LayersChangeNotification() { return Body<LayersChangeNotification>().Value; }
        public RtpNotification BodyAsConsumer_RtpNotification() { return Body<RtpNotification>().Value; }
        public Consumer.ScoreNotification BodyAsConsumer_ScoreNotification() { return Body<Consumer.ScoreNotification>().Value; }
        public Consumer.TraceNotification BodyAsConsumer_TraceNotification() { return Body<Consumer.TraceNotification>().Value; }
        public MessageNotification BodyAsDataConsumer_MessageNotification() { return Body<MessageNotification>().Value; }
        public BufferedAmountLowNotification BodyAsDataConsumer_BufferedAmountLowNotification() { return Body<BufferedAmountLowNotification>().Value; }
        public DominantSpeakerNotification BodyAsActiveSpeakerObserver_DominantSpeakerNotification() { return Body<DominantSpeakerNotification>().Value; }
        public VolumesNotification BodyAsAudioLevelObserver_VolumesNotification() { return Body<VolumesNotification>().Value; }

        public static Offset<Notification> CreateNotification(FlatBufferBuilder builder,
                                                              StringOffset handler_idOffset = default(StringOffset),
                                                              Event @event = Event.TRANSPORT_SEND_RTCP,
                                                              Body body_type = FlatBuffers.Notification.Body.NONE,
                                                              int bodyOffset = 0)
        {
            builder.StartTable(4);
            Notification.AddBody(builder, bodyOffset);
            Notification.AddHandlerId(builder, handler_idOffset);
            Notification.AddBodyType(builder, body_type);
            Notification.AddEvent(builder, @event);
            return Notification.EndNotification(builder);
        }

        public static void StartNotification(FlatBufferBuilder builder) { builder.StartTable(4); }
        public static void AddHandlerId(FlatBufferBuilder builder, StringOffset handlerIdOffset) { builder.AddOffset(0, handlerIdOffset.Value, 0); }
        public static void AddEvent(FlatBufferBuilder builder, Event @event) { builder.AddByte(1, (byte)@event, 0); }
        public static void AddBodyType(FlatBufferBuilder builder, Body bodyType) { builder.AddByte(2, (byte)bodyType, 0); }
        public static void AddBody(FlatBufferBuilder builder, int bodyOffset) { builder.AddOffset(3, bodyOffset, 0); }
        public static Offset<Notification> EndNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // handler_id
            return new Offset<Notification>(o);
        }
        public NotificationT UnPack()
        {
            var _o = new NotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(NotificationT _o)
        {
            _o.HandlerId = this.HandlerId;
            _o.Event = this.Event;
            _o.Body = new BodyUnion();
            _o.Body.Type = this.BodyType;
            switch(this.BodyType)
            {
                default:
                    break;
                case FlatBuffers.Notification.Body.Transport_SendRtcpNotification:
                    _o.Body.Value = this.Body<SendRtcpNotification>().HasValue ? this.Body<SendRtcpNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Transport_SctpStateChangeNotification:
                    _o.Body.Value = this.Body<SctpStateChangeNotification>().HasValue ? this.Body<SctpStateChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Producer_SendNotification:
                    _o.Body.Value = this.Body<SendNotification>().HasValue ? this.Body<SendNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.DataProducer_SendNotification:
                    _o.Body.Value = this.Body<DataProducer.SendNotification>().HasValue ? this.Body<DataProducer.SendNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Transport_TraceNotification:
                    _o.Body.Value = this.Body<TraceNotification>().HasValue ? this.Body<TraceNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.WebRtcTransport_IceSelectedTupleChangeNotification:
                    _o.Body.Value = this.Body<IceSelectedTupleChangeNotification>().HasValue ? this.Body<IceSelectedTupleChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.WebRtcTransport_IceStateChangeNotification:
                    _o.Body.Value = this.Body<IceStateChangeNotification>().HasValue ? this.Body<IceStateChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.WebRtcTransport_DtlsStateChangeNotification:
                    _o.Body.Value = this.Body<DtlsStateChangeNotification>().HasValue ? this.Body<DtlsStateChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.PlainTransport_TupleNotification:
                    _o.Body.Value = this.Body<TupleNotification>().HasValue ? this.Body<TupleNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.PlainTransport_RtcpTupleNotification:
                    _o.Body.Value = this.Body<RtcpTupleNotification>().HasValue ? this.Body<RtcpTupleNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.DirectTransport_RtcpNotification:
                    _o.Body.Value = this.Body<RtcpNotification>().HasValue ? this.Body<RtcpNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Producer_ScoreNotification:
                    _o.Body.Value = this.Body<ScoreNotification>().HasValue ? this.Body<ScoreNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Producer_TraceNotification:
                    _o.Body.Value = this.Body<Producer.TraceNotification>().HasValue ? this.Body<Producer.TraceNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Producer_VideoOrientationChangeNotification:
                    _o.Body.Value = this.Body<VideoOrientationChangeNotification>().HasValue ? this.Body<VideoOrientationChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Consumer_LayersChangeNotification:
                    _o.Body.Value = this.Body<LayersChangeNotification>().HasValue ? this.Body<LayersChangeNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Consumer_RtpNotification:
                    _o.Body.Value = this.Body<RtpNotification>().HasValue ? this.Body<RtpNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Consumer_ScoreNotification:
                    _o.Body.Value = this.Body<Consumer.ScoreNotification>().HasValue ? this.Body<Consumer.ScoreNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.Consumer_TraceNotification:
                    _o.Body.Value = this.Body<Consumer.TraceNotification>().HasValue ? this.Body<Consumer.TraceNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.DataConsumer_MessageNotification:
                    _o.Body.Value = this.Body<MessageNotification>().HasValue ? this.Body<MessageNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.DataConsumer_BufferedAmountLowNotification:
                    _o.Body.Value = this.Body<BufferedAmountLowNotification>().HasValue ? this.Body<BufferedAmountLowNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.ActiveSpeakerObserver_DominantSpeakerNotification:
                    _o.Body.Value = this.Body<DominantSpeakerNotification>().HasValue ? this.Body<DominantSpeakerNotification>().Value.UnPack() : null;
                    break;
                case FlatBuffers.Notification.Body.AudioLevelObserver_VolumesNotification:
                    _o.Body.Value = this.Body<VolumesNotification>().HasValue ? this.Body<VolumesNotification>().Value.UnPack() : null;
                    break;
            }
        }
        public static Offset<Notification> Pack(FlatBufferBuilder builder, NotificationT _o)
        {
            if(_o == null)
                return default(Offset<Notification>);
            var _handler_id = _o.HandlerId == null ? default(StringOffset) : builder.CreateString(_o.HandlerId);
            var _body_type  = _o.Body      == null ? FlatBuffers.Notification.Body.NONE : _o.Body.Type;
            var _body       = _o.Body      == null ? 0 : BodyUnion.Pack(builder, _o.Body);
            return CreateNotification(
              builder,
              _handler_id,
              _o.Event,
              _body_type,
              _body);
        }
    }

    public class NotificationT
    {
        public string HandlerId { get; set; }

        public Event Event { get; set; }

        public BodyUnion Body { get; set; }
    }
}
