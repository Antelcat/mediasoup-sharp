// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using FlatBuffers.RtxStream;
using Google.FlatBuffers;
using MediasoupSharp.FlatBuffers.RtpStream.T;

namespace FlatBuffers.RtpStream
{
    public struct Dump : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Dump GetRootAsDump(ByteBuffer _bb) { return GetRootAsDump(_bb, new Dump()); }
        public static Dump GetRootAsDump(ByteBuffer _bb, Dump obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Dump __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Params? Params { get { int o = __p.__offset(4); return o != 0 ? (Params?)(new Params()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public byte Score { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
        public RtxDump? RtxStream { get { int o = __p.__offset(8); return o != 0 ? (RtxDump?)(new RtxDump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

        public static Offset<Dump> CreateDump(FlatBufferBuilder builder,
                                              Offset<Params> @paramsOffset = default(Offset<Params>),
                                              byte score = 0,
                                              Offset<RtxDump> rtx_streamOffset = default(Offset<RtxDump>))
        {
            builder.StartTable(3);
            Dump.AddRtxStream(builder, rtx_streamOffset);
            Dump.AddParams(builder, @paramsOffset);
            Dump.AddScore(builder, score);
            return Dump.EndDump(builder);
        }

        public static void StartDump(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddParams(FlatBufferBuilder builder, Offset<Params> paramsOffset) { builder.AddOffset(0, paramsOffset.Value, 0); }
        public static void AddScore(FlatBufferBuilder builder, byte score) { builder.AddByte(1, score, 0); }
        public static void AddRtxStream(FlatBufferBuilder builder, Offset<RtxDump> rtxStreamOffset) { builder.AddOffset(2, rtxStreamOffset.Value, 0); }
        public static Offset<Dump> EndDump(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // params
            return new Offset<Dump>(o);
        }
        public DumpT UnPack()
        {
            var _o = new DumpT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DumpT _o)
        {
            _o.Params = this.Params.HasValue ? this.Params.Value.UnPack() : null;
            _o.Score = this.Score;
            _o.RtxStream = this.RtxStream.HasValue ? this.RtxStream.Value.UnPack() : null;
        }
        public static Offset<Dump> Pack(FlatBufferBuilder builder, DumpT _o)
        {
            if(_o == null)
                return default(Offset<Dump>);
            var _params = _o.Params == null ? default(Offset<Params>) : RtpStream.Params.Pack(builder, _o.Params);
            var _rtx_stream = _o.RtxStream == null ? default(Offset<RtxDump>) : RtxDump.Pack(builder, _o.RtxStream);
            return CreateDump(
              builder,
              _params,
              _o.Score,
              _rtx_stream);
        }
    }
}
