// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using System.Text.Json.Serialization;
using FlatBuffers.Common;
using MediasoupSharp.FlatBuffers.Consumer;

namespace FlatBuffers.Consumer
{
    public struct TraceNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static TraceNotification GetRootAsTraceNotification(ByteBuffer _bb) { return GetRootAsTraceNotification(_bb, new TraceNotification()); }
        public static TraceNotification GetRootAsTraceNotification(ByteBuffer _bb, TraceNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public TraceNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public TraceEventType Type { get { int o = __p.__offset(4); return o != 0 ? (TraceEventType)__p.bb.Get(o + __p.bb_pos) : TraceEventType.KEYFRAME; } }
        public ulong Timestamp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public TraceDirection Direction { get { int o = __p.__offset(8); return o != 0 ? (TraceDirection)__p.bb.Get(o + __p.bb_pos) : TraceDirection.DIRECTION_IN; } }
        public TraceInfo InfoType { get { int o = __p.__offset(10); return o != 0 ? (TraceInfo)__p.bb.Get(o + __p.bb_pos) : TraceInfo.NONE; } }
        public TTable? Info<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
        public KeyFrameTraceInfo InfoAsKeyFrameTraceInfo() { return Info<KeyFrameTraceInfo>().Value; }
        public FirTraceInfo InfoAsFirTraceInfo() { return Info<FirTraceInfo>().Value; }
        public PliTraceInfo InfoAsPliTraceInfo() { return Info<PliTraceInfo>().Value; }
        public RtpTraceInfo InfoAsRtpTraceInfo() { return Info<RtpTraceInfo>().Value; }

        public static Offset<TraceNotification> CreateTraceNotification(FlatBufferBuilder builder,
                                                                        TraceEventType type = TraceEventType.KEYFRAME,
                                                                        ulong timestamp = 0,
                                                                        TraceDirection direction = TraceDirection.DIRECTION_IN,
                                                                        TraceInfo info_type = TraceInfo.NONE,
                                                                        int infoOffset = 0)
        {
            builder.StartTable(5);
            TraceNotification.AddTimestamp(builder, timestamp);
            TraceNotification.AddInfo(builder, infoOffset);
            TraceNotification.AddInfoType(builder, info_type);
            TraceNotification.AddDirection(builder, direction);
            TraceNotification.AddType(builder, type);
            return TraceNotification.EndTraceNotification(builder);
        }

        public static void StartTraceNotification(FlatBufferBuilder builder) { builder.StartTable(5); }
        public static void AddType(FlatBufferBuilder builder, TraceEventType type) { builder.AddByte(0, (byte)type, 0); }
        public static void AddTimestamp(FlatBufferBuilder builder, ulong timestamp) { builder.AddUlong(1, timestamp, 0); }
        public static void AddDirection(FlatBufferBuilder builder, TraceDirection direction) { builder.AddByte(2, (byte)direction, 0); }
        public static void AddInfoType(FlatBufferBuilder builder, TraceInfo infoType) { builder.AddByte(3, (byte)infoType, 0); }
        public static void AddInfo(FlatBufferBuilder builder, int infoOffset) { builder.AddOffset(4, infoOffset, 0); }
        public static Offset<TraceNotification> EndTraceNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<TraceNotification>(o);
        }
        public TraceNotificationT UnPack()
        {
            var _o = new TraceNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(TraceNotificationT _o)
        {
            _o.Type = this.Type;
            _o.Timestamp = this.Timestamp;
            _o.Direction = this.Direction;
            _o.Info = new TraceInfoUnion();
            _o.Info.Type = this.InfoType;
            switch(this.InfoType)
            {
                default:
                    break;
                case TraceInfo.KeyFrameTraceInfo:
                    _o.Info.Value = this.Info<KeyFrameTraceInfo>().HasValue ? this.Info<KeyFrameTraceInfo>().Value.UnPack() : null;
                    break;
                case TraceInfo.FirTraceInfo:
                    _o.Info.Value = this.Info<FirTraceInfo>().HasValue ? this.Info<FirTraceInfo>().Value.UnPack() : null;
                    break;
                case TraceInfo.PliTraceInfo:
                    _o.Info.Value = this.Info<PliTraceInfo>().HasValue ? this.Info<PliTraceInfo>().Value.UnPack() : null;
                    break;
                case TraceInfo.RtpTraceInfo:
                    _o.Info.Value = this.Info<RtpTraceInfo>().HasValue ? this.Info<RtpTraceInfo>().Value.UnPack() : null;
                    break;
            }
        }
        public static Offset<TraceNotification> Pack(FlatBufferBuilder builder, TraceNotificationT _o)
        {
            if(_o == null)
                return default(Offset<TraceNotification>);
            var _info_type = _o.Info == null ? TraceInfo.NONE : _o.Info.Type;
            var _info = _o.Info == null ? 0 : TraceInfoUnion.Pack(builder, _o.Info);
            return CreateTraceNotification(
              builder,
              _o.Type,
              _o.Timestamp,
              _o.Direction,
              _info_type,
              _info);
        }
    }

    public class TraceNotificationT
    {
        public TraceEventType Type { get; set; }

        public ulong Timestamp { get; set; }

        public TraceDirection Direction { get; set; }

        public TraceInfoUnion Info { get; set; }
    }
}
