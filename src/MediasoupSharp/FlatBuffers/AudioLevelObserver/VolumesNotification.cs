// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using Google.FlatBuffers;

namespace FlatBuffers.AudioLevelObserver
{
    public struct VolumesNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static VolumesNotification GetRootAsVolumesNotification(ByteBuffer _bb) { return GetRootAsVolumesNotification(_bb, new VolumesNotification()); }
        public static VolumesNotification GetRootAsVolumesNotification(ByteBuffer _bb, VolumesNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public VolumesNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Volume? Volumes(int j) { int o = __p.__offset(4); return o != 0 ? (Volume?)(new Volume()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int VolumesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<VolumesNotification> CreateVolumesNotification(FlatBufferBuilder builder,
                                                                            VectorOffset volumesOffset = default(VectorOffset))
        {
            builder.StartTable(1);
            VolumesNotification.AddVolumes(builder, volumesOffset);
            return VolumesNotification.EndVolumesNotification(builder);
        }

        public static void StartVolumesNotification(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddVolumes(FlatBufferBuilder builder, VectorOffset volumesOffset) { builder.AddOffset(0, volumesOffset.Value, 0); }
        public static VectorOffset CreateVolumesVector(FlatBufferBuilder builder, Offset<Volume>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder builder, Offset<Volume>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Volume>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateVolumesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Volume>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartVolumesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<VolumesNotification> EndVolumesNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // volumes
            return new Offset<VolumesNotification>(o);
        }
        public VolumesNotificationT UnPack()
        {
            var _o = new VolumesNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(VolumesNotificationT _o)
        {
            _o.Volumes = new List<VolumeT>();
            for(var _j = 0; _j < this.VolumesLength; ++_j)
            { _o.Volumes.Add(this.Volumes(_j).HasValue ? this.Volumes(_j).Value.UnPack() : null); }
        }
        public static Offset<VolumesNotification> Pack(FlatBufferBuilder builder, VolumesNotificationT _o)
        {
            if(_o == null)
                return default(Offset<VolumesNotification>);
            var _volumes = default(VectorOffset);
            if(_o.Volumes != null)
            {
                var __volumes = new Offset<Volume>[_o.Volumes.Count];
                for(var _j = 0; _j < __volumes.Length; ++_j)
                { __volumes[_j] = Volume.Pack(builder, _o.Volumes[_j]); }
                _volumes = CreateVolumesVector(builder, __volumes);
            }
            return CreateVolumesNotification(
              builder,
              _volumes);
        }
    }
}
