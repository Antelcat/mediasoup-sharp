// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Google.FlatBuffers;
using MediasoupSharp.FlatBuffers.WebRtcTransport.T;

namespace FlatBuffers.WebRtcTransport
{
    public struct IceStateChangeNotification : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static IceStateChangeNotification GetRootAsIceStateChangeNotification(ByteBuffer _bb) { return GetRootAsIceStateChangeNotification(_bb, new IceStateChangeNotification()); }
        public static IceStateChangeNotification GetRootAsIceStateChangeNotification(ByteBuffer _bb, IceStateChangeNotification obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public IceStateChangeNotification __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public IceState IceState { get { int o = __p.__offset(4); return o != 0 ? (IceState)__p.bb.Get(o + __p.bb_pos) : IceState.NEW; } }

        public static Offset<IceStateChangeNotification> CreateIceStateChangeNotification(FlatBufferBuilder builder,
                                                                                          IceState ice_state = IceState.NEW)
        {
            builder.StartTable(1);
            IceStateChangeNotification.AddIceState(builder, ice_state);
            return IceStateChangeNotification.EndIceStateChangeNotification(builder);
        }

        public static void StartIceStateChangeNotification(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddIceState(FlatBufferBuilder builder, IceState iceState) { builder.AddByte(0, (byte)iceState, 0); }
        public static Offset<IceStateChangeNotification> EndIceStateChangeNotification(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<IceStateChangeNotification>(o);
        }
        public IceStateChangeNotificationT UnPack()
        {
            var _o = new IceStateChangeNotificationT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(IceStateChangeNotificationT _o)
        {
            _o.IceState = this.IceState;
        }
        public static Offset<IceStateChangeNotification> Pack(FlatBufferBuilder builder, IceStateChangeNotificationT _o)
        {
            if(_o == null)
                return default(Offset<IceStateChangeNotification>);
            return CreateIceStateChangeNotification(
              builder,
              _o.IceState);
        }
    }
}
