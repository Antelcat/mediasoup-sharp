// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using FlatBuffers.Transport;
using Google.FlatBuffers;
using MediasoupSharp.FlatBuffers.WebRtcTransport.T;
using Tuple = FlatBuffers.Transport.Tuple;

namespace FlatBuffers.WebRtcTransport
{
    public struct DumpResponse : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb) { return GetRootAsDumpResponse(_bb, new DumpResponse()); }
        public static DumpResponse GetRootAsDumpResponse(ByteBuffer _bb, DumpResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DumpResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Dump? Base { get { int o = __p.__offset(4); return o != 0 ? (Dump?)(new Dump()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public IceRole IceRole { get { int o = __p.__offset(6); return o != 0 ? (IceRole)__p.bb.Get(o + __p.bb_pos) : IceRole.CONTROLLED; } }
        public IceParameters? IceParameters { get { int o = __p.__offset(8); return o != 0 ? (IceParameters?)(new IceParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public IceCandidate? IceCandidates(int j) { int o = __p.__offset(10); return o != 0 ? (IceCandidate?)(new IceCandidate()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int IceCandidatesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
        public IceState IceState { get { int o = __p.__offset(12); return o != 0 ? (IceState)__p.bb.Get(o + __p.bb_pos) : IceState.NEW; } }
        public Tuple? IceSelectedTuple { get { int o = __p.__offset(14); return o != 0 ? (Tuple?)(new Tuple()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public DtlsParameters? DtlsParameters { get { int o = __p.__offset(16); return o != 0 ? (DtlsParameters?)(new DtlsParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
        public DtlsState DtlsState { get { int o = __p.__offset(18); return o != 0 ? (DtlsState)__p.bb.Get(o + __p.bb_pos) : DtlsState.NEW; } }

        public static Offset<DumpResponse> CreateDumpResponse(FlatBufferBuilder builder,
                                                              Offset<Dump> @baseOffset = default(Offset<Dump>),
                                                              IceRole ice_role = IceRole.CONTROLLED,
                                                              Offset<IceParameters> ice_parametersOffset = default(Offset<IceParameters>),
                                                              VectorOffset ice_candidatesOffset = default(VectorOffset),
                                                              IceState ice_state = IceState.NEW,
                                                              Offset<Tuple> ice_selected_tupleOffset = default(Offset<Tuple>),
                                                              Offset<DtlsParameters> dtls_parametersOffset = default(Offset<DtlsParameters>),
                                                              DtlsState dtls_state = DtlsState.NEW)
        {
            builder.StartTable(8);
            DumpResponse.AddDtlsParameters(builder, dtls_parametersOffset);
            DumpResponse.AddIceSelectedTuple(builder, ice_selected_tupleOffset);
            DumpResponse.AddIceCandidates(builder, ice_candidatesOffset);
            DumpResponse.AddIceParameters(builder, ice_parametersOffset);
            DumpResponse.AddBase(builder, @baseOffset);
            DumpResponse.AddDtlsState(builder, dtls_state);
            DumpResponse.AddIceState(builder, ice_state);
            DumpResponse.AddIceRole(builder, ice_role);
            return DumpResponse.EndDumpResponse(builder);
        }

        public static void StartDumpResponse(FlatBufferBuilder builder) { builder.StartTable(8); }
        public static void AddBase(FlatBufferBuilder builder, Offset<Dump> baseOffset) { builder.AddOffset(0, baseOffset.Value, 0); }
        public static void AddIceRole(FlatBufferBuilder builder, IceRole iceRole) { builder.AddByte(1, (byte)iceRole, 0); }
        public static void AddIceParameters(FlatBufferBuilder builder, Offset<IceParameters> iceParametersOffset) { builder.AddOffset(2, iceParametersOffset.Value, 0); }
        public static void AddIceCandidates(FlatBufferBuilder builder, VectorOffset iceCandidatesOffset) { builder.AddOffset(3, iceCandidatesOffset.Value, 0); }
        public static VectorOffset CreateIceCandidatesVector(FlatBufferBuilder builder, Offset<IceCandidate>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateIceCandidatesVectorBlock(FlatBufferBuilder builder, Offset<IceCandidate>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateIceCandidatesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<IceCandidate>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateIceCandidatesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<IceCandidate>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartIceCandidatesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddIceState(FlatBufferBuilder builder, IceState iceState) { builder.AddByte(4, (byte)iceState, 0); }
        public static void AddIceSelectedTuple(FlatBufferBuilder builder, Offset<Tuple> iceSelectedTupleOffset) { builder.AddOffset(5, iceSelectedTupleOffset.Value, 0); }
        public static void AddDtlsParameters(FlatBufferBuilder builder, Offset<DtlsParameters> dtlsParametersOffset) { builder.AddOffset(6, dtlsParametersOffset.Value, 0); }
        public static void AddDtlsState(FlatBufferBuilder builder, DtlsState dtlsState) { builder.AddByte(7, (byte)dtlsState, 0); }
        public static Offset<DumpResponse> EndDumpResponse(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // base
            builder.Required(o, 8);  // ice_parameters
            builder.Required(o, 10);  // ice_candidates
            builder.Required(o, 16);  // dtls_parameters
            return new Offset<DumpResponse>(o);
        }
        public DumpResponseT UnPack()
        {
            var _o = new DumpResponseT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DumpResponseT _o)
        {
            _o.Base = this.Base.HasValue ? this.Base.Value.UnPack() : null;
            _o.IceRole = this.IceRole;
            _o.IceParameters = this.IceParameters.HasValue ? this.IceParameters.Value.UnPack() : null;
            _o.IceCandidates = new List<IceCandidateT>();
            for(var _j = 0; _j < this.IceCandidatesLength; ++_j)
            { _o.IceCandidates.Add(this.IceCandidates(_j).HasValue ? this.IceCandidates(_j).Value.UnPack() : null); }
            _o.IceState = this.IceState;
            _o.IceSelectedTuple = this.IceSelectedTuple.HasValue ? this.IceSelectedTuple.Value.UnPack() : null;
            _o.DtlsParameters = this.DtlsParameters.HasValue ? this.DtlsParameters.Value.UnPack() : null;
            _o.DtlsState = this.DtlsState;
        }
        public static Offset<DumpResponse> Pack(FlatBufferBuilder builder, DumpResponseT _o)
        {
            if(_o == null)
                return default(Offset<DumpResponse>);
            var _base = _o.Base == null ? default(Offset<Dump>) : Dump.Pack(builder, _o.Base);
            var _ice_parameters = _o.IceParameters == null ? default(Offset<IceParameters>) : WebRtcTransport.IceParameters.Pack(builder, _o.IceParameters);
            var _ice_candidates = default(VectorOffset);
            if(_o.IceCandidates != null)
            {
                var __ice_candidates = new Offset<IceCandidate>[_o.IceCandidates.Count];
                for(var _j = 0; _j < __ice_candidates.Length; ++_j)
                { __ice_candidates[_j] = IceCandidate.Pack(builder, _o.IceCandidates[_j]); }
                _ice_candidates = CreateIceCandidatesVector(builder, __ice_candidates);
            }
            var _ice_selected_tuple = _o.IceSelectedTuple == null ? default(Offset<Tuple>) : Tuple.Pack(builder, _o.IceSelectedTuple);
            var _dtls_parameters = _o.DtlsParameters == null ? default(Offset<DtlsParameters>) : WebRtcTransport.DtlsParameters.Pack(builder, _o.DtlsParameters);
            return CreateDumpResponse(
              builder,
              _base,
              _o.IceRole,
              _ice_parameters,
              _ice_candidates,
              _o.IceState,
              _ice_selected_tuple,
              _dtls_parameters,
              _o.DtlsState);
        }
    }
}
