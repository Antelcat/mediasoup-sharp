// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using System;
using System.Collections.Generic;
using Google.FlatBuffers;
using MediasoupSharp.FlatBuffers.WebRtcTransport.T;

namespace FlatBuffers.WebRtcTransport
{
    public struct DtlsParameters : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static DtlsParameters GetRootAsDtlsParameters(ByteBuffer _bb) { return GetRootAsDtlsParameters(_bb, new DtlsParameters()); }
        public static DtlsParameters GetRootAsDtlsParameters(ByteBuffer _bb, DtlsParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public DtlsParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Fingerprint? Fingerprints(int j) { int o = __p.__offset(4); return o != 0 ? (Fingerprint?)(new Fingerprint()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int FingerprintsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
        public DtlsRole Role { get { int o = __p.__offset(6); return o != 0 ? (DtlsRole)__p.bb.Get(o + __p.bb_pos) : DtlsRole.AUTO; } }

        public static Offset<DtlsParameters> CreateDtlsParameters(FlatBufferBuilder builder,
                                                                  VectorOffset fingerprintsOffset = default(VectorOffset),
                                                                  DtlsRole role = DtlsRole.AUTO)
        {
            builder.StartTable(2);
            DtlsParameters.AddFingerprints(builder, fingerprintsOffset);
            DtlsParameters.AddRole(builder, role);
            return DtlsParameters.EndDtlsParameters(builder);
        }

        public static void StartDtlsParameters(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddFingerprints(FlatBufferBuilder builder, VectorOffset fingerprintsOffset) { builder.AddOffset(0, fingerprintsOffset.Value, 0); }
        public static VectorOffset CreateFingerprintsVector(FlatBufferBuilder builder, Offset<Fingerprint>[] data) { builder.StartVector(4, data.Length, 4); for(int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateFingerprintsVectorBlock(FlatBufferBuilder builder, Offset<Fingerprint>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateFingerprintsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Fingerprint>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateFingerprintsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Fingerprint>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartFingerprintsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddRole(FlatBufferBuilder builder, DtlsRole role) { builder.AddByte(1, (byte)role, 0); }
        public static Offset<DtlsParameters> EndDtlsParameters(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 4);  // fingerprints
            return new Offset<DtlsParameters>(o);
        }
        public DtlsParametersT UnPack()
        {
            var _o = new DtlsParametersT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(DtlsParametersT _o)
        {
            _o.Fingerprints = new List<FingerprintT>();
            for(var _j = 0; _j < this.FingerprintsLength; ++_j)
            { _o.Fingerprints.Add(this.Fingerprints(_j).HasValue ? this.Fingerprints(_j).Value.UnPack() : null); }
            _o.Role = this.Role;
        }
        public static Offset<DtlsParameters> Pack(FlatBufferBuilder builder, DtlsParametersT _o)
        {
            if(_o == null)
                return default(Offset<DtlsParameters>);
            var _fingerprints = default(VectorOffset);
            if(_o.Fingerprints != null)
            {
                var __fingerprints = new Offset<Fingerprint>[_o.Fingerprints.Count];
                for(var _j = 0; _j < __fingerprints.Length; ++_j)
                { __fingerprints[_j] = Fingerprint.Pack(builder, _o.Fingerprints[_j]); }
                _fingerprints = CreateFingerprintsVector(builder, __fingerprints);
            }
            return CreateDtlsParameters(
              builder,
              _fingerprints,
              _o.Role);
        }
    }
}
