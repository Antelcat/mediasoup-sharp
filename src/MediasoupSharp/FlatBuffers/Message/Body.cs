// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using FlatBuffers.Notification;
using FlatBuffers.Request;
using FlatBuffers.Response;
using MediasoupSharp.FlatBuffers.Logging.T;

namespace FlatBuffers.Message
{
    public enum Body : byte
    {
        NONE = 0,

        Request = 1,

        Response = 2,

        Notification = 3,

        Log = 4,
    };

    public class BodyUnion
    {
        public Body Type { get; set; }
        public object Value { get; set; }

        public BodyUnion()
        {
            this.Type = Body.NONE;
            this.Value = null;
        }

        public T As<T>() where T : class { return this.Value as T; }
        public RequestT AsRequest() { return this.As<RequestT>(); }
        public static BodyUnion FromRequest(RequestT _request) { return new BodyUnion { Type = Body.Request, Value = _request }; }
        public ResponseT AsResponse() { return this.As<ResponseT>(); }
        public static BodyUnion FromResponse(ResponseT _response) { return new BodyUnion { Type = Body.Response, Value = _response }; }
        public NotificationT AsNotification() { return this.As<NotificationT>(); }
        public static BodyUnion FromNotification(NotificationT _notification) { return new BodyUnion { Type = Body.Notification, Value = _notification }; }
        public LogT AsLog() { return this.As<LogT>(); }
        public static BodyUnion FromLog(LogT _log) { return new BodyUnion { Type = Body.Log, Value = _log }; }

        public static int Pack(Google.FlatBuffers.FlatBufferBuilder builder, BodyUnion _o)
        {
            switch(_o.Type)
            {
                default:
                    return 0;
                case Body.Request:
                    return Request.Request.Pack(builder, _o.AsRequest()).Value;
                case Body.Response:
                    return Response.Response.Pack(builder, _o.AsResponse()).Value;
                case Body.Notification:
                    return Notification.Notification.Pack(builder, _o.AsNotification()).Value;
                case Body.Log:
                    return Log.Log.Pack(builder, _o.AsLog()).Value;
            }
        }
    }
}
