// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FlatBuffers.Message
{
    using Google.FlatBuffers;
    using System.Text.Json.Serialization;

    public struct Message : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
        public static Message GetRootAsMessage(ByteBuffer _bb) { return GetRootAsMessage(_bb, new Message()); }
        public static Message GetRootAsMessage(ByteBuffer _bb, Message obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public Body DataType { get { int o = __p.__offset(4); return o != 0 ? (Body)__p.bb.Get(o + __p.bb_pos) : Body.NONE; } }
        public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
        public Request.Request DataAsRequest() { return Data<Request.Request>().Value; }
        public Response.Response DataAsResponse() { return Data<Response.Response>().Value; }
        public Notification.Notification DataAsNotification() { return Data<Notification.Notification>().Value; }
        public Log.Log DataAsLog() { return Data<Log.Log>().Value; }

        public static Offset<Message> CreateMessage(FlatBufferBuilder builder,
                                                    Body data_type = Body.NONE,
                                                    int dataOffset = 0)
        {
            builder.StartTable(2);
            Message.AddData(builder, dataOffset);
            Message.AddDataType(builder, data_type);
            return Message.EndMessage(builder);
        }

        public static void StartMessage(FlatBufferBuilder builder) { builder.StartTable(2); }
        public static void AddDataType(FlatBufferBuilder builder, Body dataType) { builder.AddByte(0, (byte)dataType, 0); }
        public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
        public static Offset<Message> EndMessage(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            builder.Required(o, 6);  // data
            return new Offset<Message>(o);
        }
        public static void FinishMessageBuffer(FlatBufferBuilder builder, Offset<Message> offset) { builder.Finish(offset.Value); }
        public static void FinishSizePrefixedMessageBuffer(FlatBufferBuilder builder, Offset<Message> offset) { builder.FinishSizePrefixed(offset.Value); }
        public MessageT UnPack()
        {
            var _o = new MessageT();
            this.UnPackTo(_o);
            return _o;
        }
        public void UnPackTo(MessageT _o)
        {
            _o.Data = new BodyUnion();
            _o.Data.Type = this.DataType;
            switch(this.DataType)
            {
                default:
                    break;
                case Body.Request:
                    _o.Data.Value = this.Data<Request.Request>().HasValue ? this.Data<Request.Request>().Value.UnPack() : null;
                    break;
                case Body.Response:
                    _o.Data.Value = this.Data<Response.Response>().HasValue ? this.Data<Response.Response>().Value.UnPack() : null;
                    break;
                case Body.Notification:
                    _o.Data.Value = this.Data<Notification.Notification>().HasValue ? this.Data<Notification.Notification>().Value.UnPack() : null;
                    break;
                case Body.Log:
                    _o.Data.Value = this.Data<Log.Log>().HasValue ? this.Data<Log.Log>().Value.UnPack() : null;
                    break;
            }
        }
        public static Offset<Message> Pack(FlatBufferBuilder builder, MessageT _o)
        {
            if(_o == null)
                return default(Offset<Message>);
            var _data_type = _o.Data == null ? Body.NONE : _o.Data.Type;
            var _data = _o.Data == null ? 0 : BodyUnion.Pack(builder, _o.Data);
            return CreateMessage(
              builder,
              _data_type,
              _data);
        }
    }

    public class MessageT
    {
        [JsonPropertyName("data_type")]
        private Body DataType
        {
            get
            {
                return this.Data != null ? this.Data.Type : Body.NONE;
            }
            set
            {
                this.Data = new BodyUnion();
                this.Data.Type = value;
            }
        }
        [JsonPropertyName("data")]
        public BodyUnion Data { get; set; }

        public MessageT()
        {
            this.Data = null;
        }
        public static MessageT DeserializeFromBinary(byte[] fbBuffer)
        {
            return Message.GetRootAsMessage(new ByteBuffer(fbBuffer)).UnPack();
        }
        public byte[] SerializeToBinary()
        {
            var fbb = new FlatBufferBuilder(0x10000);
            Message.FinishMessageBuffer(fbb, Message.Pack(fbb, this));
            return fbb.DataBuffer.ToSizedArray();
        }
    }
}
